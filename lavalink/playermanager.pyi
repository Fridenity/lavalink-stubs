"""
This type stub file was generated by pyright.
"""

import typing as t

from .node import Node
from .models import BasePlayer

"""
MIT License

Copyright (c) 2017-present Devoxin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

_T = t.TypeVar('_T')
_PlayerT = t.TypeVar('_PlayerT', bound=BasePlayer)
PredicateSig = t.Callable[[_T], bool]

class PlayerManager:
    """Represents the player manager that contains all the players."""

    players: t.Mapping[int, BasePlayer]
    """Cache of all the players that Lavalink has created."""

    # def __init__(self, lavalink, player) -> None: ...
    def __len__(self) -> int: ...
    """Returns the total number of stored players."""
    def __iter__(self) -> t.Generator[t.Tuple[int, BasePlayer], None, None]:
        """Returns an iterator that yields a tuple of (guild_id, player)."""
        # """Returns an iterator of all the stored players."""
        ...
    def values(self) -> t.Generator[BasePlayer, None, None]:
        """Returns an iterator that yields only values."""
        ...
    @t.overload
    def find_all(self) -> t.List[BasePlayer]: ...
    @t.overload
    def find_all(self, predicate: PredicateSig[_PlayerT]) -> t.List[_PlayerT]: ...
    def find_all(
        self, predicate: t.Optional[PredicateSig[_PlayerT]] = ...
    ) -> t.List[_PlayerT]:
        """
        Returns a list of players that match the given predicate.

        Parameters
        ----------
        predicate: Optional[:class:`function`]
            A predicate to return specific players. Defaults to ``None``.

        Returns
        -------
        List[:class:`BasePlayer`]
            This could be a :class:`DefaultPlayer` if no custom player implementation was provided.
        """
        ...
    def get(self, guild_id: int) -> t.Optional[BasePlayer]:
        """
        Gets a player from cache.

        Parameters
        ----------
        guild_id: :class:`int`
            The guild_id associated with the player to get.

        Returns
        -------
        Optional[:class:`BasePlayer`]
            This could be a :class:`DefaultPlayer` if no custom player implementation was provided.
        """
        ...
    def remove(self, guild_id: int) -> None:
        """
        Removes a player from the internal cache.

        Parameters
        ----------
        guild_id: :class:`int`
            The player to remove from cache.
        """
        ...
    def create(
        self, guild_id: int, region: str = ..., endpoint: str = ..., node: Node = ...
    ) -> BasePlayer:
        """
        Creates a player if one doesn't exist with the given information.

        If node is provided, a player will be created on that node.

        If region is provided, a player will be created on a node in the given region.

        If endpoint is provided, Lavalink.py will attempt to parse the region from the endpoint and return a node in the parsed region.

        If node, region and endpoint are left unspecified, or region/endpoint selection fails, Lavalink.py will fall back to the node with the lowest penalty.

        Region can be omitted if node is specified and vice-versa.

        Parameters
        ----------
        guild_id: :class:`int`
            The guild_id to associate with the player.
        region: Optional[:class:`str`]
            The region to use when selecting a Lavalink node. Defaults to ``None``.
        endpoint: Optional[:class:`str`]
            The address of the Discord voice server. Defaults to ``None``.
        node: Optional[:class:`Node`]
            The node to put the player on. Defaults to ``None`` and a node with the lowest penalty is chosen.

        Returns
        -------
        :class:`BasePlayer`
            A class that inherits ``BasePlayer``. By default, the actual class returned will
            be :class:`DefaultPlayer`, however if you have specified a custom player implementation,
            then this will be different.
        """
        ...
    async def destroy(self, guild_id: int) -> None:
        """|coro|

        Removes a player from cache, and also Lavalink if applicable.
        Ensure you have disconnected the given guild_id from the voicechannel
        first, if connected.

        Warning
        -------
        This should only be used if you know what you're doing. Players should never be
        destroyed unless they have been moved to another :class:`Node`.

        Parameters
        ----------
        guild_id: int
            The guild_id associated with the player to remove.
        """
        ...
