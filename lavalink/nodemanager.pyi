"""
This type stub file was generated by pyright.
"""

import typing as t

from .node import Node

"""
MIT License

Copyright (c) 2017-present Devoxin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

RegionType = t.Mapping[str, t.Sequence[str]]

class NodeManager:
    """Represents the node manager that contains all lavalink nodes."""

    nodes: t.List[Node]
    """Cache of all the nodes that Lavalink has created."""
    regions: RegionType
    """A mapping of continent -> Discord RTC regions."""

    # def __init__(self, lavalink, regions: dict) -> None: ...
    def __len__(self) -> int: ...
    """Returns the total number of nodes."""
    def __iter__(self) -> t.Iterator[Node]: ...
    """Returns an iterator of all the stored nodes."""
    @property
    def available_nodes(self) -> t.List[Node]:
        """Returns a list of available nodes."""
        ...
    def add_node(
        self,
        host: str,
        port: int,
        password: str,
        region: str,
        resume_key: str = ...,
        resume_timeout: int = ...,
        name: str = ...,
        reconnect_attempts: int = ...,
        filters: bool = ...,
        ssl: bool = ...,
    ) -> None:
        """
        Adds a node to Lavalink's node manager.

        Parameters
        ----------
        host: :class:`str`
            The address of the Lavalink node.
        port: :class:`int`
            The port to use for websocket and REST connections.
        password: :class:`str`
            The password used for authentication.
        region: :class:`str`
            The region to assign this node to.
        resume_key: Optional[:class:`str`]
            A resume key used for resuming a session upon re-establishing a WebSocket connection to Lavalink.
            Defaults to ``None``.
        resume_timeout: Optional[:class:`int`]
            How long the node should wait for a connection while disconnected before clearing all players.
            Defaults to ``60``.
        name: Optional[:class:`str`]
            An identifier for the node that will show in logs. Defaults to ``None``.
        reconnect_attempts: Optional[:class:`int`]
            The amount of times connection with the node will be reattempted before giving up.
            Set to `-1` for infinite. Defaults to ``3``.
        filters: Optional[:class:`bool`]
            Whether to use the new ``filters`` op. This setting currently only applies to development
            Lavalink builds, where the ``equalizer`` op was swapped out for the broader ``filters`` op which
            offers more than just equalizer functionality. Ideally, you should only change this setting if you
            know what you're doing, as this can prevent the effects from working.
        ssl: Optional[:class:`bool`]
            Whether to use SSL for the node. SSL will use ``wss`` and ``https``, instead of ``ws`` and ``http``,
            respectively. Your node should support SSL if you intend to enable this, either via reverse proxy or
            other methods. Only enable this if you know what you're doing.
        """
        ...
    def remove_node(self, node: Node) -> None:
        """
        Removes a node.

        Make sure you have called :func:`Node.destroy` to close any open WebSocket connection.

        Parameters
        ----------
        node: :class:`Node`
            The node to remove from the list.
        """
        ...
    def get_nodes_by_region(self, region_key: str) -> t.List[Node]:
        """
        Get a list of nodes by their region.
        This does not account for node availability, so the nodes returned
        could be either available or unavailable.

        Parameters
        ----------
        region_key: :class:`str`
            The region key. If you haven't specified your own regions, this will be
            one of ``asia``, ``eu`` or ``us``, otherwise, it'll be one of the keys
            within the dict you provided.

        Returns
        -------
        List[:class:`Node`]
            A list of nodes. Could be empty if no nodes were found with the specified region key.
        """
        ...
    def get_region(self, endpoint: str) -> t.Optional[str]:
        """
        Returns a Lavalink.py-friendly region from a Discord voice server address.

        Parameters
        ----------
        endpoint: :class:`str`
            The address of the Discord voice server.

        Returns
        -------
        Optional[:class:`str`]
        """
        ...
    def find_ideal_node(self, region: str = ...) -> t.Optional[Node]:
        """
        Finds the best (least used) node in the given region, if applicable.

        Parameters
        ----------
        region: Optional[:class:`str`]
            The region to find a node in. Defaults to ``None``.

        Returns
        -------
        Optional[:class:`Node`]
        """
        ...
